//AS3///////////////////////////////////////////////////////////////////////////// // Copyright 2010 Maxsquatch// ////////////////////////////////////////////////////////////////////////////////package com.oomph{		import flash.display.Sprite;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.utils.*;		internal class OomphEngine extends Sprite	{				private var _running:Boolean;		private var _frameTweenDict:Dictionary = new Dictionary(true);		private var _tmrRefDict:Dictionary = new Dictionary(true);		private var _tmrTweenDict:Dictionary = new Dictionary(true);		private var _oomphUtil:OomphUtil = OomphUtil.getInstance();				private static var _instance:OomphEngine;				public static function getInstance():OomphEngine 		{			if(_instance == null) {				_instance = new OomphEngine(new SingletonEnforcer());			}			return _instance;		}				public function OomphEngine(enforcer:SingletonEnforcer):void		{		}				public function runTween(tweenVO:TweenVO):void		{				if(tweenVO.useSeconds) {				var tmr:Timer = tweenVO.tweeningObj.timer;				tmr.addEventListener(TimerEvent.TIMER, tmrHandler, false, 0, true);								_tmrTweenDict[tweenVO] = tweenVO;				_tmrRefDict[tmr] = tweenVO;								tmr.start();			} else {				// Tween will start when the next ENTER_FRAME event is triggered				_frameTweenDict[tweenVO] = tweenVO;				if(!_running) start();			}		}				private function start():void		{			_running = true;			this.addEventListener(Event.ENTER_FRAME, updateHandler, false, 0, true);		}				private function stop():void		{			_running = false;			this.removeEventListener(Event.ENTER_FRAME, updateHandler);		}				public function stopTween(tweenVO:TweenVO):void		{			if(tweenVO.useSeconds) {				var tmr:Timer = tweenVO.tweeningObj.timer;				tmr.stop();				tmr.removeEventListener(TimerEvent.TIMER, tmrHandler);								delete _tmrTweenDict[tweenVO];				delete _tmrRefDict[tmr];							} else {				// Tween will start when the next ENTER_FRAME event is triggered				delete _frameTweenDict[tweenVO];			}		}				private function updateTween(tweenVO:TweenVO):void		{			var tObj:TweeningObject = tweenVO.tweeningObj;			var targ:Object = tObj.targObj;			var tweenables:Dictionary = tweenVO.tweenables;			var i:int;			var easedVal:Number;			var propVO:PropertyVO;			var propName:String;			for(var key:Object in tweenables) {				propVO = tweenables[key];				propName = propVO.propName;								// If the object being tweened has the property, tween it				if(propVO.modifier != null) {					easedVal = tweenVO.calculateEase(0, 1);					easedVal = propVO.modifier(propVO.begVal, propVO.begVal + propVO.changeVal, easedVal, propVO.modifierParams);				} else {					easedVal = tweenVO.calculateEase(propVO.begVal, propVO.changeVal);				}				tObj.setProp(propName, easedVal);			}						// Apply motion blur			if(tweenVO.motionBlur) tObj.blur();						tweenVO.time++;						// Apply progress if set			if(tweenVO.progressHandler != null) tweenVO.progressHandler.apply(targ, tweenVO.progressParams);						if(tweenVO.time > tweenVO.duration) {				// set the final properties				for(var prop:String in tweenables) {					propVO = tweenables[prop];					tObj.setProp(prop, propVO.endVal);				}				// Call commit, which commits any special props that need multiple props set				_oomphUtil.call();								// Check if yoyo or loops is set, if it is break out of this check				if(!tweenVO.checkFinished()) return;								// ClearsInterval or EnterFrame and remove blur if there is one				tweenVO.tweeningObj.destroy();								// Dispatch to Oomph.as which removes references to tObj and calls completeHandler				var oEvent:OomphEvent = new OomphEvent(OomphEvent.TWEEN_COMPELTE);				oEvent.tweenVO = tweenVO;				dispatchEvent(oEvent);			} else {				_oomphUtil.call();			}		}				////////////////////		// Event Handlers //		////////////////////		private function tmrHandler(event:TimerEvent):void		{			var tweenVO:TweenVO = _tmrRefDict[event.target as Timer];			updateTween(tweenVO);		}				// Can get called from Enter Frame listener or setInterval function 		public function updateHandler(event:Event = null, passedTweenVO:TweenVO = null):void		{			var numTweens:int;			for(var tVO:Object in _frameTweenDict) {				updateTween(tVO as TweenVO);				numTweens++;			}			if(numTweens == 0) stop();		}			}	}class SingletonEnforcer{};