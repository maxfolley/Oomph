//AS3///////////////////////////////////////////////////////////////////////////// // Copyright 2010 Maxsquatch// ////////////////////////////////////////////////////////////////////////////////package com.oomph{			import flash.filters.BlurFilter;	import flash.geom.ColorTransform;	import flash.utils.Dictionary;	import flash.utils.Timer;		internal class TweenVO	{		private var _completeParams						:Array = null;										// Parameters to pass into onMotionFinsihed function		private var _progressParams						:Array = null;										// Parameters to pass into onProgress function		private var _startParams						:Array = null;										// Parameters to pass into onMotionStart function				private var _isPaused							:Boolean = false;		private var _motionBlur							:Boolean = false;		private var _removeOldDelays					:Boolean = false;									// If true, any delays in tween registered before this one will be removed		private var _removeOnFinish						:Boolean = false;									// Remove display object on finish		private var _reversing							:Boolean = false;									// Whether or not the object is in a reverse state, yoyo and reverseYoYo		private var _reverseYoYo						:Boolean = false;		private var _showBezier							:Boolean = false;									// Draws bezier curves if they are specified		private var _useSeconds							:Boolean = false;									// Used in determining if duration or time is used		private var _yoyo								:Boolean = false;				private var _tweenables							:Dictionary = new Dictionary(true); 				// Dictionary of property info objects, stores by property name				private var _ease								:Function = Oomph.NONE; 							// Defaults to Linear.easeNone		private var _completeHandler					:Function;											// Called when motion is complete		private var _startHandler						:Function;											// Called when motion is started		private var _progressHandler					:Function;											// Called when motion is progressing				private var _blurQuality						:int = Oomph.MEDIUM;		private var _direction							:int = 1;		private var _loops								:int = -1;		private var _numLoops							:int = 0;											// Increments to determine amount of loops already done				private var _amplitude							:Number;											// Specifies the amplitude of the sine wave for elastic easing		private var _blurStrength						:Number = .3;										// Strength of motion blur, 0-1		private var _period								:Number;											// Specifies the period of the sine wave for elastic easing		private var _delay								:Number = 0;		private var _duration							:Number = 30; 										// Defaults to 30 frames		private var _overshoot							:Number;											// Over shoot for back ease type		private var _rate								:Number = 33;										// Number of times to update motion per second		private var _seconds							:Number = 0;		private var _time								:Number = 1;										// Used in computing position in OomphEngine.as				private var _bezier								:Object;											// Object that contains defined control points for a bezier tween		private var _oomphRegistrar						:OomphRegistrar = OomphRegistrar.getInstance();		private var _oomphUtil							:OomphUtil = OomphUtil.getInstance();				private var _style								:String;				private var _tweeningObj						:TweeningObject;		private var _beginColor							:uint;												// Begin color to use for color transform on color tween						//---------------------------------------		//  GETTERS		//---------------------------------------		public function get useSeconds():Boolean { return _useSeconds };		public function get tweenables():Dictionary { return _tweenables };						//---------------------------------------		//  GETTERS & SETTERS		//---------------------------------------		public function get completeParams():Array { return _completeParams };				public function set completeParams(value:Array):void { _completeParams = value };				public function get progressParams():Array { return _progressParams };				public function set progressParams(value:Array):void { _progressParams = value };				public function get startParams():Array { return _startParams };				public function set startParams(value:Array):void { _startParams = value };				public function get removeOldDelays():Boolean { return _removeOldDelays };				public function set removeOldDelays(value:Boolean):void { _removeOldDelays = value };		public function get showBezier():Boolean { return _showBezier };				public function set showBezier(value:Boolean):void {			_showBezier = value;			if(_showBezier) {				_oomphUtil.callLater(tweeningObj.drawBezier, tweenables['x'].endVal, tweenables['y'].endVal);					}		}				public function get amplitude():Number { return _amplitude };				public function set amplitude(value:Number):void { _amplitude = value };				public function get overshoot():Number { return _overshoot };				public function set overshoot(value:Number):void { _overshoot = value };				public function get period():Number { return _period };				public function set period(value:Number):void { _period = value };				public function get bezier():Object { return _bezier };				public function set bezier(value:Object):void {			_bezier = value;						var i:int;			var numPoints:int;			var point:Object;			var propertyVO:PropertyVO;			for(var key:String in _tweenables) {				propertyVO = _tweenables[key];				// Array of bezier points				if(_bezier is Array) {					i = 0;					numPoints = _bezier.length;					while(i < numPoints) {						point = _bezier[i];						if(point[propertyVO.propName] != null) {							if(propertyVO.modifier == null) propertyVO.modifier = _oomphUtil.getBezierPosition;							if(propertyVO.modifierParams == null) {								propertyVO.modifierParams = [point[propertyVO.propName]];							} else {								propertyVO.modifierParams.push(point[propertyVO.propName]);							}						}						i++;					}				// One bezier object				} else {					if(_bezier[propertyVO.propName] != null) {						propertyVO.modifier = _oomphUtil.getBezierPosition;						propertyVO.modifierParams = [_bezier[propertyVO.propName]];					}				}			}		}				public function get reverseYoYo():Boolean { return _reverseYoYo };				public function set reverseYoYo(value:Boolean):void { _reverseYoYo = value };				public function get yoyo():Boolean { return _yoyo };				public function set yoyo(value:Boolean):void { _yoyo = value };				public function get isPaused():Boolean { return _isPaused };				public function set isPaused(value:Boolean):void { _isPaused = value };				public function get motionBlur():Boolean { return _motionBlur };				public function set motionBlur(value:Boolean):void		{			_motionBlur = value;						if(motionBlur) {				var filters:Array = _tweeningObj.removeFilters(BlurFilter);								_tweeningObj.bFilter = new BlurFilter(0, 0, _blurQuality);				filters.unshift(_tweeningObj.bFilter);				_tweeningObj.filters = filters;								// Set prevX and prevY to current x and y so blur isn't hug one first frame				_tweeningObj.prevX = _tweeningObj.targObj.x;				_tweeningObj.prevY = _tweeningObj.targObj.y;			}		}				public function get removeOnFinish():Boolean { return _removeOnFinish };				public function set removeOnFinish(value:Boolean):void { _removeOnFinish = value };				public function get completeHandler():Function { return _completeHandler; }				public function set completeHandler(value:Function):void { _completeHandler  = value };				public function get ease():Function { return _ease };				public function set ease(value:Function):void { _ease = value };				public function get progressHandler():Function { return _progressHandler };				public function set progressHandler(value:Function):void { _progressHandler  = value };				public function get startHandler():Function { return _startHandler };				public function set startHandler(value:Function):void { _startHandler  = value };				public function get blurQuality():int { return _blurQuality };				public function set blurQuality(value:int):void		{			_blurQuality = value;						// If blur filter has already been created, adjust its quality			if(_tweeningObj.bFilter) _tweeningObj.bFilter.quality = _blurQuality;		}				public function get loops():int { return _loops };				public function set loops(value:int):void		{			if(value >= 0) {				_loops = value;				_numLoops = 1;			}		}				public function get blurStrength():Number { return _blurStrength };				public function set blurStrength(value:Number):void { _blurStrength = value };				public function get delay():Number { return _delay };				public function set delay(value:Number):void { _delay = value };				public function get duration():Number { return _duration };				public function set duration(value:Number):void { _duration = value };				public function get rate():Number { return _rate };				public function set rate(value:Number):void		{			_rate = value;			_oomphUtil.callLater(prepTmr);		}				public function get seconds():Number { return _seconds };				public function set seconds(value:Number):void		{			_seconds = value;			_useSeconds = true;			_oomphUtil.callLater(prepTmr);		}				public function get time():Number { return _time };				public function set time(value:Number):void { _time = value };				public function get style():String { return _style };				public function set style(value:String):void { _style = value };				public function get tweeningObj():TweeningObject { return _tweeningObj };				public function get beginColor():uint { return _beginColor };		public function set beginColor(value:uint):void {			_beginColor = value;						var currentTransform:ColorTransform = _tweeningObj.targObj.transform.colorTransform as ColorTransform;						var transform:ColorTransform = new ColorTransform();			transform.color = _beginColor;						if(currentTransform.redOffset == 0 && currentTransform.greenOffset == 0 && currentTransform.blueOffset == 0) {				tweenables['red'].begVal = transform.redOffset;				tweenables['green'].begVal = transform.greenOffset;				tweenables['blue'].begVal = transform.blueOffset;			}		}				public function TweenVO(targObj:Object, tweenables:Dictionary, modObj:Object = null):void		{						_tweeningObj = new TweeningObject(targObj, this);			_tweenables = tweenables;						for(var key:String in modObj) {				if(_oomphRegistrar.checkParam(key)) {					this[key] = modObj[key];				} else {					trace(Warnings.WRONG_PARAM + ": " + key);				}			}									// Call any functions scheduled for call through callLater function			_oomphUtil.call();		}				/**		 * Runs the easing function and returns the new property value<br/>		 * Back ease types allow for an overshoot parameter<br/>		 * Elastic ease types allow for apmlitude and period paramaters		 */		public function calculateEase(begVal:Number, changeVal:Number):Number		{			var easeValue:Number;			switch(_ease) {				case Oomph.BACK_OUT:				case Oomph.BACK_OUT:				case Oomph.BACK_INOUT:					easeValue = _ease(time, begVal, changeVal, duration, _overshoot);					break;								case Oomph.ELASTIC_OUT:				case Oomph.ELASTIC_IN:				case Oomph.ELASTIC_INOUT:					easeValue = _ease(time, begVal, changeVal, duration, _amplitude, _period);					break;								default:					easeValue = _ease(time, begVal, changeVal, duration);					break;			}			return easeValue;		}				/**		 * Check if yoyoing or looping, if not returns true		 * @return finished:Boolean - Flag indicating if tween should be removed or not		 */				public function checkFinished():Boolean		{			var finished:Boolean = true;			var propVO:PropertyVO;			var key:Object;			// Reset vars			if(_yoyo || _reverseYoYo) {				if(_reversing == false) {					_reversing = true;				} else {					_reversing = false;				}								var resetMods:Boolean;				// Must reverse the bezier array				if(bezier is Array) resetMods = true;									for(key in _tweenables) {					// Sets properties of the object = to nothing					propVO = _tweenables[key];					propVO.reverse();					// Reset modifierParams so new array is created					if(resetMods) propVO.modifierParams = null;					_time = 0;				}								// Reverse the ease function in -> out, out -> in, inout remains the same				if(_reverseYoYo) {					var newEase:Function = _oomphRegistrar.getReverseEase(_ease);					if(newEase != null) _ease = newEase;				}				if(resetMods) bezier = _bezier.reverse();								// If animation is being reversed break out without incrementing any loops				if(_reversing || _loops == -1) {					finished = false;					return finished;				}			}			if(_loops >= 0) {				// Loop infinitely				if(_loops == 0) {					finished = false;					_time = 0;					for(key in _tweenables) {						propVO = _tweenables[key];						propVO.reset();					}				// Continue loop but increment _loops				} else if(_numLoops < _loops) {					_time = 0;					_numLoops += 1;					for(key in _tweenables) {						propVO = _tweenables[key];						propVO.reset();					}					finished = false;				}			}			return finished;		}				/**		 * Used to check if any properties in the instance remain to be tweened		 * @return Boolean - Flag indicating if a property is stil tweening		 */				public function checkTweenables():Boolean		{			var stillTween:Boolean = false;			// If there are any objects left in the tween it will set stillTween to true			for(var key:String in _tweenables) {				stillTween = true;			}			return stillTween;		}				/**		 * Preps the timer for second based animation 		 */				private function prepTmr():void		{			if(_useSeconds) {				// Convert duration to work with timer based animations.				_duration = _seconds * (1000/_rate);				// Create the timer used in the OomphEnginge				_tweeningObj.timer = new Timer(_rate);			}					}			}	}