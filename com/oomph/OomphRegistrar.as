//AS3///////////////////////////////////////////////////////////////////////////// // Copyright 2010 Maxsquatch// ////////////////////////////////////////////////////////////////////////////////package com.oomph {		import flash.utils.Dictionary;		internal class OomphRegistrar {				private var _easeReversDict:Dictionary;						// Stores ease function counterparts for reverseYoYo parameter		private var _paramDict:Dictionary;							// Stores applicable parameter names		private var _propDict:Dictionary;							// Stores tweenable property names		private var _specialPropDict:Dictionary;					// Stores special tweenable properties				//only need one instance of this class for the whole site		private static var _instance:OomphRegistrar;				public static function getInstance():OomphRegistrar		{			if(_instance == null) {				_instance = new OomphRegistrar(new SingletonEnforcer());			}			return _instance;		}				public function OomphRegistrar(enforcer:SingletonEnforcer):void {			init();		}				private function init():void		{			// Register the property names			_propDict = new Dictionary();			_propDict['alpha'] = 'alpha';			_propDict['blue'] = 'blue';			_propDict['color'] = 'color';			_propDict['frame'] = 'frame';			_propDict['green'] = 'green';			_propDict['height'] = 'height';			_propDict['red'] = 'red';			_propDict['rotation'] = 'rotation';			_propDict['scaleX'] = 'scaleX';			_propDict['scaleY'] = 'scaleY';			_propDict['scaleXY'] = 'scaleXY';			_propDict['tint'] = 'tint';			_propDict['width'] = 'width';			_propDict['x'] = 'x';			_propDict['y'] = 'y';			_propDict['xy'] = 'xy';						// Register param names			_paramDict = new Dictionary();			_paramDict['amplitude'] = 'amplitude';			_paramDict['beginColor'] = 'beginColor';			_paramDict['bezier'] = 'bezier';			_paramDict['blurQuality'] = 'blurQuality';			_paramDict['blurStrength'] = 'blurStrength';			_paramDict['completeHandler'] = 'completeHandler';			_paramDict['completeParams'] = 'completeParams';			_paramDict['delay'] = 'delay';			_paramDict['duration'] = 'duration';			_paramDict['ease'] = 'ease';			_paramDict['loops'] = 'loops';			_paramDict['motionBlur'] = 'motionBlur';			_paramDict['overshoot'] = 'overshoot';			_paramDict['period'] = 'period';			_paramDict['progressHandler'] = 'progressHandler';			_paramDict['progressParams'] = 'progressParams';			_paramDict['rate'] = 'rate';			_paramDict['removeOldDelays'] = 'removeOldDelays';			_paramDict['reverseYoYo'] = 'reverseYoYo';			_paramDict['removeOnFinish'] = 'removeOnFinish';			_paramDict['seconds'] = 'seconds';			_paramDict['showBezier'] = 'showBezier';			_paramDict['startHandler'] = 'startHandler';			_paramDict['startParams'] = 'startParams';			_paramDict['style'] = 'style';			_paramDict['yoyo'] = 'yoyo';					// Register the special property names			_specialPropDict = new Dictionary();			_specialPropDict['angle'] = 'angle';						// Store ease function's counterparts			_easeReversDict = new Dictionary();			_easeReversDict[Easing.inBack] = Easing.outBack;			_easeReversDict[Easing.outBack] = Easing.inBack;			_easeReversDict[Easing.inBounce] = Easing.outBounce;			_easeReversDict[Easing.outBounce] = Easing.inBounce;			_easeReversDict[Easing.inCirc] = Easing.outCirc;			_easeReversDict[Easing.outCirc] = Easing.inCirc;			_easeReversDict[Easing.inCubic] = Easing.outCubic;			_easeReversDict[Easing.outCubic] = Easing.inCubic;			_easeReversDict[Easing.inElastic] = Easing.outElastic;			_easeReversDict[Easing.outElastic] = Easing.inElastic;			_easeReversDict[Easing.inExpo] = Easing.outExpo;			_easeReversDict[Easing.outExpo] = Easing.inExpo;			_easeReversDict[Easing.inSine] = Easing.outSine;			_easeReversDict[Easing.outSine] = Easing.inSine;			_easeReversDict[Easing.inQuad] = Easing.outQuad;			_easeReversDict[Easing.outQuad] = Easing.inQuad;			_easeReversDict[Easing.inQuart] = Easing.outQuart;			_easeReversDict[Easing.outQuart] = Easing.inQuart;			_easeReversDict[Easing.inQuint] = Easing.outQuint;			_easeReversDict[Easing.outQuint] = Easing.inQuint;		}				public function checkParam(paramName:String):Boolean		{			if(_paramDict[paramName]) {				return true;			}			return false;		}				public function checkProp(propName:String):Boolean 		{			if(_propDict[propName]) {				return true;			}			return false;		}				public function checkSpecialProp(propName:String):Boolean		{			if(_specialPropDict[propName]) {				return true;			}			return false;		}				public function getReverseEase(ease:Function):Function		{			return _easeReversDict[ease];		}	}}class SingletonEnforcer {}